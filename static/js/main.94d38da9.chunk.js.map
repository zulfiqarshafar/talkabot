{"version":3,"sources":["minimize icon.svg","close icon.svg","Banner.js","Chat.js","ChatButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Banner","react_default","a","createElement","className","Component","Chat","onClick","this","props","handleClick","src","iconMini","alt","title","ChatButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","showChat","bind","assertThisInitialized","setState","_this2","src_Chat","iconClose","App","src_Banner","src_ChatButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uOCYzBC,mLARb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,4CAJiBE,oCCcNC,mLAXb,OACCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUG,QAASC,KAAKC,MAAMC,aAAaT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAUR,UAAU,cAAcS,IAAI,mBAC7GZ,EAAAC,EAAAC,cAAA,UAAQW,MAAM,eAAeH,IAAI,oEAChCV,EAAAC,EAAAC,cAAA,sDANcE,8BCmCJU,cAjCb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KACDa,MAAQ,CAACC,YAAY,EAAMC,UAAU,GAE1CR,EAAKN,YAAcM,EAAKN,YAAYe,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAJFA,6EAQjBR,KAAKmB,SAAS,SAAAL,GAAK,MAAK,CACtBC,YAAaD,EAAMC,WACnBC,UAAWF,EAAME,gDAIT,IAAAI,EAAApB,KACXA,KAAKmB,SAAS,SAAAL,GAAK,MAAK,CACrBC,WAAYK,EAAKnB,MAAMc,WACvBC,SAAUI,EAAKnB,MAAMe,6CAKvB,OACFvB,EAAAC,EAAAC,cAAA,WACGK,KAAKc,MAAME,SAAWvB,EAAAC,EAAAC,cAAC0B,EAAD,CAAMnB,YAAaF,KAAKE,cAAkB,KAClET,EAAAC,EAAAC,cAAA,UAAQI,QAASC,KAAKE,YAAaN,UAAU,WACrCI,KAAKc,MAAMC,WAAatB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,QAA6CH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKmB,IAAW1B,UAAU,gBAAgBS,IAAI,wBA3B1GR,aCiBV0B,qBAfb,SAAAA,EAAYtB,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAuB,IACjBf,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAc,GAAAV,KAAAb,KAAMC,KACDa,MAAQ,GAFIN,wEAMjB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,cAVU5B,cCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94d38da9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/minimize icon.dc9d0e20.svg\";","module.exports = __webpack_public_path__ + \"static/media/close icon.6106f6fe.svg\";","import React, { Component } from 'react';\r\n\r\nclass Banner extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"banner\">\r\n\t\t\t\t<h1>Welcome to talkabot.id</h1>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Banner;","import React, { Component } from 'react';\r\nimport iconMini from './minimize icon.svg';\r\n\r\nclass Chat extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"chatFrame\">\r\n\t\t\t\t<button className=\"miniBtn\" onClick={this.props.handleClick}><img src={iconMini} className=\"iconMiniBtn\" alt=\"Minimize Icon\" /></button>\r\n\t\t\t\t<iframe title=\"talkabotChat\" src=\"https://your-staging.talklogics.co/user/5b6056b87e71490004ede0df\">\r\n\t\t\t\t\t<p>Browser does not support iframe.</p>\r\n\t\t\t\t</iframe>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Chat;","import React, { Component } from 'react';\r\nimport Chat from './Chat.js';\r\nimport iconClose from './close icon.svg';\r\n\r\nclass ChatButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isToggleOn: true, showChat: false};\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState(state => ({\r\n      isToggleOn: !state.isToggleOn,\r\n      showChat: !state.showChat\r\n    }));\r\n  }\r\n\r\n  miniClick() {\r\n  \tthis.setState(state => ({\r\n      isToggleOn: this.props.isToggleOn,\r\n      showChat: this.props.showChat\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\t\t<div>\r\n\t\t\t{ this.state.showChat ? <Chat handleClick={this.handleClick} /> : null }\r\n\t\t\t<button onClick={this.handleClick} className=\"chatBtn\">\r\n\t        \t{this.state.isToggleOn ? <span className=\"iconOpenChat\">CHAT</span> : <img src={iconClose} className=\"iconCloseChat\" alt=\"Close Icon\" />}\r\n\t\t\t</button>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatButton;","import React, { Component } from 'react';\nimport Banner from './Banner.js';\nimport ChatButton from './ChatButton.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Banner />\n        <ChatButton />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}